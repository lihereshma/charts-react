{"version":3,"sources":["Components/LineChart.js","Components/BarChart.js","Components/DoughnutChart.js","App.js","serviceWorker.js","index.js"],"names":["LineChart","data","labels","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","options","title","display","text","scales","yAxes","ticks","min","max","stepSize","BarChart","DoughnutChart","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAgDeA,MA7Cf,WAwCE,OACE,kBAAC,OAAD,CAAMC,KAxCK,CACXC,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,OACrCC,SAAU,CACR,CACEC,MAAO,qBACPH,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBI,YAAa,UACbC,gBAAiB,0BACjBC,qBAAsB,uBACtBC,iBAAkB,WAEpB,CACEJ,MAAO,qBACPH,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBI,YAAa,UACbC,gBAAiB,uBACjBC,qBAAsB,yBACtBC,iBAAkB,aAuBFC,QAlBN,CACdC,MAAO,CACLC,SAAS,EACTC,KAAM,cAERC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,IAAK,EACLC,IAAK,EACLC,SAAU,UCOPC,MAzCf,WAoCE,OACE,kBAAC,MAAD,CAAKlB,KApCM,CACXC,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,OACrCC,SAAU,CACR,CACEC,MAAO,qBACPH,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBI,YAAa,UACbC,gBAAiB,2BAEnB,CACEF,MAAO,qBACPH,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBI,YAAa,UACbC,gBAAiB,0BAuBFG,QAlBL,CACdC,MAAO,CACLC,SAAS,EACTC,KAAM,aAERC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,IAAK,EACLC,IAAK,EACLC,SAAU,UCPPE,MAvBf,WAkBE,OACE,kBAAC,WAAD,CAAUnB,KAlBC,CACXC,OAAQ,CAAC,SAAU,UAAW,OAAQ,oBAAqB,UAC3DC,SAAU,CACR,CACEF,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,GACnBI,YAAa,OACbC,gBAAiB,CAAC,UAAW,UAAW,UAAW,UAAW,cAY1CG,QAPV,CACdC,MAAO,CACLC,SAAS,EACTC,KAAM,sBCAGS,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3773bca1.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\n\r\nfunction LineChart() {\r\n  const data = {\r\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\r\n    datasets: [ \r\n      {\r\n        label: 'Sales for 2020 (M)',\r\n        data: [3, 2, 2, 1, 5],\r\n        borderColor: '#b17179',\r\n        backgroundColor: 'rgba(177, 113, 121, .6)',\r\n        pointBackgroundColor: 'rgba(74, 48, 77, .5)',\r\n        pointBorderColor: '#4a304d'\r\n      },\r\n      {\r\n        label: 'Sales for 2019 (M)',\r\n        data: [1, 3, 2, 2, 3],\r\n        borderColor: '#0e2e3b',\r\n        backgroundColor: 'rgba(14, 46, 59, .5)',\r\n        pointBackgroundColor: 'rgba(22, 102, 120, .6)',\r\n        pointBorderColor: '#166678'\r\n      }\r\n    ]\r\n  }\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: 'Line Chart'\r\n    },\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            min: 0,\r\n            max: 6,\r\n            stepSize: 1\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n  return (\r\n    <Line data={ data } options={ options }/>\r\n  )\r\n}\r\n\r\nexport default LineChart\r\n","import React from 'react'\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nfunction BarChart() {\r\n  const data = {\r\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\r\n    datasets: [ \r\n      {\r\n        label: 'Sales for 2020 (M)',\r\n        data: [3, 2, 2, 1, 5],\r\n        borderColor: '#b17179',\r\n        backgroundColor: 'rgba(177, 113, 121, .6)',\r\n      },\r\n      {\r\n        label: 'Sales for 2019 (M)',\r\n        data: [1, 3, 2, 2, 3],\r\n        borderColor: '#0e2e3b',\r\n        backgroundColor: 'rgba(14, 46, 59, .5)',\r\n      }\r\n    ]\r\n  }\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: 'Bar Chart'\r\n    },\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            min: 0,\r\n            max: 6,\r\n            stepSize: 1\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n  return (\r\n    <Bar data={ data } options={ options }/>\r\n  )\r\n}\r\n\r\nexport default BarChart\r\n","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2'\r\n\r\nfunction DoughnutChart() {\r\n  const data = {\r\n    labels: ['Chrome', 'Firefox', 'Edge', 'Internet Explorer', 'Others'],\r\n    datasets: [ \r\n      {\r\n        data: [6, 4, 2, 1, 2],\r\n        borderColor: '#fff',\r\n        backgroundColor: ['#8fcfd1', '#df5e88', '#f6ab6c', '#f6efa6', '#a6ed8e']\r\n      }\r\n    ]\r\n  }\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: 'Doughnut Chart'\r\n    }\r\n  }\r\n  return (\r\n    <Doughnut data={ data } options={ options }/>\r\n  )\r\n}\r\n\r\nexport default DoughnutChart\r\n","import React from 'react';\nimport './App.css';\nimport LineChart from './Components/LineChart';\nimport BarChart from './Components/BarChart';\nimport DoughnutChart from './Components/DoughnutChart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"chart\">\n        <LineChart />\n        <BarChart />\n        <DoughnutChart />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}